"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[587],{25043:e=>{e.exports=JSON.parse('{"functions":[{"name":"ObserveAttribute","desc":"```lua\\nObserveAttribute(workspace, \\"Attribute\\", function(value)\\n    print(\\"Attribute is now\\", value)\\nend\\n```","params":[{"name":"instance","desc":"An instance to observe","lua_type":"Instance"},{"name":"attributeName","desc":"The name of the attribute to observe","lua_type":"string"},{"name":"callback","desc":"The callback to call for the attribute","lua_type":"ValueObserverCallback<T>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":20,"path":"src/ObserveAttribute.luau"}},{"name":"ObserveChildren","desc":"```lua\\nObserveChildren(workspace, function(child)\\n    print(child.Name, \\"is a child of workspace\\")\\n\\n    return function()\\n        print(child.Name, \\"is no longer a child of workspace\\")\\n    end\\nend)\\n```","params":[{"name":"instance","desc":"An instance to observe","lua_type":"Instance"},{"name":"callback","desc":"The callback to call for each child","lua_type":"TableObserverCallback<Instance>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":24,"path":"src/ObserveChildren.luau"}},{"name":"ObserveDescendants","desc":"```lua\\nObserveDescendants(workspace, function(descendant)\\n    print(descendant.Name, \\"is a descendant of workspace\\")\\n\\n    return function()\\n        print(descendant.Name, \\"is no longer a descendant of workspace\\")\\n    end\\nend)\\n```","params":[{"name":"instance","desc":"An instance to observe","lua_type":"Instance"},{"name":"callback","desc":"The callback to call for each descendant","lua_type":"TableObserverCallback<Instance>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":24,"path":"src/ObserveDescendants.luau"}},{"name":"ObservePlayers","desc":"```lua\\nObservePlayers(function(player)\\n    print(player.Name, \\"joined the game\\")\\n\\n    return function()\\n        print(player.Name, \\"left the game\\")\\n    end\\nend)\\n```","params":[{"name":"callback","desc":"The callback to call for each player","lua_type":"TableObserverCallback<Player>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":24,"path":"src/ObservePlayers.luau"}},{"name":"ObserveProperty","desc":"```lua\\nObserveProperty(workspace, \\"Name\\", function(value)\\n    print(\\"Name is now\\", value)\\nend\\n```","params":[{"name":"instance","desc":"An instance to observe","lua_type":"Instance"},{"name":"propertyName","desc":"The name of the property to observe","lua_type":"string"},{"name":"callback","desc":"The callback to call for the property","lua_type":"ValueObserverCallback<T>"}],"returns":[{"desc":"","lua_type":"Cleanup\\r\\n"}],"function_type":"static","source":{"line":24,"path":"src/ObserveProperty.luau"}},{"name":"ObserveTagged","desc":"```lua\\nObserveTagged(\\"Tag\\", function(instance)\\n    print(instance.Name, \\"is tagged with Tag\\")\\n\\n    return function()\\n        print(instance.Name, \\"is no longer tagged with Tag\\")\\n    end\\nend)\\n```","params":[{"name":"tagName","desc":"The tag to observe","lua_type":"string"},{"name":"callback","desc":"The callback to call when the tag is added or removed","lua_type":"TableObserverCallback"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":26,"path":"src/ObserveTagged.luau"}},{"name":"ObserveTags","desc":"```lua\\nObserveTags(function(tagName)\\n    print(tagName, \\"is a tag\\")\\n\\n    return function()\\n        print(tagName, \\"is no longer a tag\\")\\n    end\\nend)\\n```","params":[{"name":"callback","desc":"The callback to call for each tag","lua_type":"ValueObserverCallback<T>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":25,"path":"src/ObserveTags.luau"}},{"name":"ObserveValue","desc":"```lua\\nObserveValue(workspace, function(value)\\n    print(\\"Value is now\\", value)\\nend\\n```","params":[{"name":"valueBase","desc":"A ValueBase to observe","lua_type":"ValueBase"},{"name":"callback","desc":"The callback to call for the value","lua_type":"ValueObserverCallback<T>"}],"returns":[{"desc":"","lua_type":"Cleanup\\r\\n"}],"function_type":"static","source":{"line":20,"path":"src/ObserveValue.luau"}},{"name":"TableObserver","desc":"```lua\\nTableObserver(workspace:GetChildren(), workspace.ChildAdded, workspace.ChildRemoved, function(child)\\n    print(child.Name, \\"is a child of workspace\\")\\n\\n    return function()\\n        print(child.Name, \\"is no longer a child of workspace\\")\\n    end\\nend)\\n```","params":[{"name":"tab","desc":"A table to observe","lua_type":"{[any]: T}"},{"name":"addedSignal","desc":"A signal that fires when a value is added to the table","lua_type":"Signal<T>"},{"name":"removedSignal","desc":"A signal that fires when a value is removed from the table","lua_type":"Signal<any>"},{"name":"callback","desc":"A callback to call for each value in the table","lua_type":"TableObserverCallback<T>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":26,"path":"src/TableObserver.luau"}},{"name":"ValueObserver","desc":"```lua\\nValueObserver(function()\\n    return workspace.CurrentCamera\\nend, workspace:GetPropertyChangedSignal(\\"CurrentCamera\\"), function(camera)\\n    print(\\"Current camera is now\\", camera)\\nend)\\n```","params":[{"name":"valueGetter","desc":"A function that returns the current value","lua_type":"() -> T"},{"name":"changedSignal","desc":"A signal that fires when the value changes","lua_type":"Signal<any>"},{"name":"callback","desc":"A callback to call for the value","lua_type":"TableObserverCallback<T>"}],"returns":[{"desc":"","lua_type":"Cleanup"}],"function_type":"static","source":{"line":22,"path":"src/ValueObserver.luau"}}],"properties":[],"types":[{"name":"Cleanup","desc":"Cleanup function type","lua_type":"() -> ()","source":{"line":6,"path":"src/init.luau"}},{"name":"ValueObserverCallback<T>","desc":"Value observer callback type","lua_type":"(T) -> ()","source":{"line":12,"path":"src/init.luau"}},{"name":"TableObserverCallback<T>","desc":"Table observer callback type","lua_type":"(T) -> (Cleanup)","source":{"line":18,"path":"src/init.luau"}}],"name":"Observe","desc":"","source":{"line":36,"path":"src/init.luau"}}')}}]);